// Generated by gencpp from file arm_moveit/ArmJointState.msg
// DO NOT EDIT!


#ifndef ARM_MOVEIT_MESSAGE_ARMJOINTSTATE_H
#define ARM_MOVEIT_MESSAGE_ARMJOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_moveit
{
template <class ContainerAllocator>
struct ArmJointState_
{
  typedef ArmJointState_<ContainerAllocator> Type;

  ArmJointState_()
    : position1(0.0)
    , position2(0.0)
    , position3(0.0)
    , position4(0.0)  {
    }
  ArmJointState_(const ContainerAllocator& _alloc)
    : position1(0.0)
    , position2(0.0)
    , position3(0.0)
    , position4(0.0)  {
  (void)_alloc;
    }



   typedef float _position1_type;
  _position1_type position1;

   typedef float _position2_type;
  _position2_type position2;

   typedef float _position3_type;
  _position3_type position3;

   typedef float _position4_type;
  _position4_type position4;





  typedef boost::shared_ptr< ::arm_moveit::ArmJointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_moveit::ArmJointState_<ContainerAllocator> const> ConstPtr;

}; // struct ArmJointState_

typedef ::arm_moveit::ArmJointState_<std::allocator<void> > ArmJointState;

typedef boost::shared_ptr< ::arm_moveit::ArmJointState > ArmJointStatePtr;
typedef boost::shared_ptr< ::arm_moveit::ArmJointState const> ArmJointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_moveit::ArmJointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_moveit::ArmJointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arm_moveit

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'arm_moveit': ['/home/wolf/Mechanical_Practice/catkin_ws/src/arm_moveit/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arm_moveit::ArmJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_moveit::ArmJointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_moveit::ArmJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_moveit::ArmJointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_moveit::ArmJointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_moveit::ArmJointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_moveit::ArmJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3610f49fa52e93e9f1d1fa85ce263838";
  }

  static const char* value(const ::arm_moveit::ArmJointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3610f49fa52e93e9ULL;
  static const uint64_t static_value2 = 0xf1d1fa85ce263838ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_moveit::ArmJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_moveit/ArmJointState";
  }

  static const char* value(const ::arm_moveit::ArmJointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_moveit::ArmJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position1\n\
float32 position2\n\
float32 position3\n\
float32 position4\n\
";
  }

  static const char* value(const ::arm_moveit::ArmJointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_moveit::ArmJointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position1);
      stream.next(m.position2);
      stream.next(m.position3);
      stream.next(m.position4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmJointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_moveit::ArmJointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_moveit::ArmJointState_<ContainerAllocator>& v)
  {
    s << indent << "position1: ";
    Printer<float>::stream(s, indent + "  ", v.position1);
    s << indent << "position2: ";
    Printer<float>::stream(s, indent + "  ", v.position2);
    s << indent << "position3: ";
    Printer<float>::stream(s, indent + "  ", v.position3);
    s << indent << "position4: ";
    Printer<float>::stream(s, indent + "  ", v.position4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MOVEIT_MESSAGE_ARMJOINTSTATE_H
